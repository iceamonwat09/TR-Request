@model TrainingRequestApp.Models.TrainingRequest
<div class="container-fluid py-4" style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); min-height: 100vh;">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-11">
                <div class="card shadow-lg border-0" style="border-radius: 15px;">
                    <div class="card-header bg-primary text-center py-4" style="border-radius: 15px 15px 0 0;">
                        <h2 class="mb-0 text-white fw-bold">
                            üìå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏≠‡∏ö‡∏£‡∏°
                        </h2>
                    </div>

                    <div class="card-body p-4">
                        <form id="trainingRequestForm" method="post" enctype="multipart/form-data">

                            <!-- ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏° -->
                            <div class="row mb-4">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label fw-bold text-dark mb-3">
                                            üè¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
                                        </label>
                                        <div class="d-flex gap-4">
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="Company" asp-for="Company" value="F2-‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£" id="company1" style="transform: scale(1.2);">
                                                <label class="form-check-label fw-medium" for="company1">
                                                    F2-‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="Company" asp-for="Company" value="F4-‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ" id="company2" style="transform: scale(1.2);">
                                                <label class="form-check-label fw-medium" for="company2">
                                                    F4-‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label fw-bold text-dark mb-3">
                                            üìö ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°
                                        </label>
                                        <div class="d-flex gap-4">
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="TrainingType" asp-for="TrainingType" value="Public" id="type1" style="transform: scale(1.2);">
                                                <label class="form-check-label fw-medium" for="type1">
                                                    Public
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" name="TrainingType" asp-for="TrainingType" value="In House" id="type2" style="transform: scale(1.2);">
                                                <label class="form-check-label fw-medium" for="type2">
                                                    In House
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <hr class="my-4">

                            <!-- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏£‡∏Å - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å -->
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label asp-for="Factory" class="form-label fw-bold">üè≠ ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô</label>
                                        <input asp-for="Factory" name="Factory" id="Factory" class="form-control form-control-lg" style="border-radius: 10px;" />
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label fw-bold">
                                            üìß CC.Mail
                                            <small class="text-muted">(‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•)</small>
                                        </label>
                                        <select id="ccEmailSelect"
                                                class="form-select form-select-lg"
                                                multiple
                                                style="width: 100%; border-radius: 10px;">
                                            <!-- Options ‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å JavaScript -->
                                        </select>
                                        <!-- Hidden inputs ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà -->
                                        <div id="ccEmailHiddenInputs"></div>
                                        <span class="text-danger" asp-validation-for="CCEmail"></span>
                                    </div>
                                    <div class="form-group">
                                        <label asp-for="Department" class="form-label fw-bold">üè¢ ‡∏ù‡πà‡∏≤‡∏¢</label>
                                        <select asp-for="Department" id="departmentSelect" name="Department" class="form-select form-select-lg" style="border-radius: 10px;" required>
                                            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ù‡πà‡∏≤‡∏¢ --</option>
                                        </select>
                                        <span class="text-danger" asp-validation-for="Department"></span>
                                    </div>

                                    <!-- ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Position Dropdown ‡πÉ‡∏´‡∏°‡πà -->
                                    <div class="form-group">
                                        <label class="form-label fw-bold">üëî ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</label>
                                        <select id="positionSelect" name="Position" class="form-select form-select-lg" style="border-radius: 10px;" disabled>
                                            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ù‡πà‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô --</option>
                                        </select>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label asp-for="StartDate" class="form-label fw-bold">üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏ö‡∏£‡∏°</label>
                                                <input asp-for="StartDate" id="StartDate" name="StartDate" class="form-control form-control-lg" type="date" style="border-radius: 10px;" />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label asp-for="EndDate" class="form-label fw-bold">üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°</label>
                                                <input asp-for="EndDate" id="EndDate" name="EndDate" class="form-control form-control-lg" type="date" style="border-radius: 10px;" />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label asp-for="SeminarTitle" class="form-label fw-bold">üìñ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏±‡∏°‡∏°‡∏ô‡∏≤</label>
                                        <input asp-for="SeminarTitle" id="SeminarTitle" name="SeminarTitle" class="form-control form-control-lg" style="border-radius: 10px;" />
                                    </div>

                                    <div class="form-group">
                                        <label asp-for="TrainingLocation" class="form-label fw-bold">üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏£‡∏°</label>
                                        <input asp-for="TrainingLocation" id="TrainingLocation" name="TrainingLocation" class="form-control form-control-lg" style="border-radius: 10px;" />
                                    </div>

                                    <div class="form-group">
                                        <label asp-for="Instructor" class="form-label fw-bold">üë®‚Äçüè´ ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏£/‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô</label>
                                        <input asp-for="Instructor" id="Instructor" name="Instructor" class="form-control form-control-lg" style="border-radius: 10px;" />
                                    </div>
                                </div>

                                <!-- üí∞ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (Public) - 2 ‡∏ä‡πà‡∏≠‡∏á -->
                                <div class="col-12 mt-4" id="budgetPublicCard" style="display: none;">
                                    <div class="card border-0 shadow-sm" style="border-radius: 12px;">
                                        <div class="card-header bg-info text-white" style="border-radius: 12px 12px 0 0;">
                                            <h5 class="mb-0 fw-bold">üí∞ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (Public)</h5>
                                        </div>
                                        <div class="card-body p-4">
                                            <div class="row g-3">
                                                <!-- ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô -->
                                                <div class="col-md-6">
                                                    <label class="form-label fw-bold">üí∞ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô (‡∏ö‡∏≤‡∏ó)</label>
                                                    <input type="number" id="CostPerPerson" name="CostPerPerson" class="form-control form-control-lg budget-input-public" step="0.01" min="0" value="0" style="border-radius: 10px;" />
                                                </div>

                                                <!-- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏° -->
                                                <div class="col-md-6">
                                                    <label class="form-label fw-bold">‚è∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°</label>
                                                    <input type="number" name="TrainingHours" id="TrainingHours" class="form-control form-control-lg budget-input-public" min="0.5" step="0.5" value="0" style="border-radius: 10px;" />
                                                </div>

                                                <!-- ‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ -->
                                                <div class="col-12">
                                                    <hr class="my-3">
                                                    <div class="alert alert-success d-flex justify-content-between align-items-center" style="border-radius: 10px;">
                                                        <span class="fw-bold fs-5">üíµ ‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡∏ö‡∏≤‡∏ó):</span>
                                                        <span class="fw-bold fs-4 text-success" id="totalCostDisplayPublic">0.00</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- üí∞ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (In House) - 7 ‡∏ä‡πà‡∏≠‡∏á -->
                                <div class="col-12 mt-4" id="budgetInHouseCard" style="display: none;">
                                    <div class="card border-0 shadow-sm" style="border-radius: 12px;">
                                        <div class="card-header bg-warning text-dark" style="border-radius: 12px 12px 0 0;">
                                            <h5 class="mb-0 fw-bold">üí∞ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (In House)</h5>
                                        </div>
                                        <div class="card-body p-4">
                                            <div class="row g-3">


                                                <!-- ‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô/‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏£ -->
                                                <div class="col-md-6">
                                                    <label asp-for="RegistrationCost" class="form-label fw-bold">üìã ‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô/‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏£ (‡∏ö‡∏≤‡∏ó)</label>
                                                    <input asp-for="RegistrationCost" name="RegistrationCost" id="RegistrationCost" class="form-control form-control-lg budget-input" type="number" step="0.01" min="0" value="0" style="border-radius: 10px;" />
                                                </div>


                                                <!-- ‡∏Ñ‡πà‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏£ -->
                                                <div class="col-md-6">
                                                    <label asp-for="InstructorFee" class="form-label fw-bold">üë®‚Äçüè´ ‡∏Ñ‡πà‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏£ (‡∏ö‡∏≤‡∏ó)</label>
                                                    <input asp-for="InstructorFee" name="InstructorFee" id="InstructorFee" class="form-control form-control-lg budget-input-inhouse" type="number" step="0.01" min="0" value="0" style="border-radius: 10px;" />
                                                </div>

                                                <!-- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡πÅ‡∏°‡∏ô‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏£ -->
                                                <div class="col-md-6">
                                                    <label class="form-label fw-bold">üíº ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡πÅ‡∏°‡∏ô‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏£ (‡∏ö‡∏≤‡∏ó)</label>
                                                    <input name="InstructorCommission" id="InstructorCommission" class="form-control form-control-lg budget-input-inhouse" type="number" step="0.01" min="0" value="0" style="border-radius: 10px;" />
                                                </div>

                                                <!-- ‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå -->
                                                <div class="col-md-6">
                                                    <label asp-for="EquipmentCost" class="form-label fw-bold">üõ†Ô∏è ‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏ö‡∏≤‡∏ó)</label>
                                                    <input asp-for="EquipmentCost" name="EquipmentCost" id="EquipmentCost" class="form-control form-control-lg budget-input-inhouse" type="number" step="0.01" min="0" value="0" style="border-radius: 10px;" />
                                                </div>

                                                <!-- ‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£ -->
                                                <div class="col-md-6">
                                                    <label asp-for="FoodCost" class="form-label fw-bold">üçΩÔ∏è ‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡∏ö‡∏≤‡∏ó)</label>
                                                    <input asp-for="FoodCost" name="FoodCost" id="FoodCost" class="form-control form-control-lg budget-input-inhouse" type="number" step="0.01" min="0" value="0" style="border-radius: 10px;" />
                                                </div>

                                                <!-- ‡∏≠‡∏∑‡πà‡∏ô‡πÜ -->
                                                <div class="col-md-6">
                                                    <label asp-for="OtherCost" class="form-label fw-bold">üîß ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏ö‡∏≤‡∏ó)</label>
                                                    <input asp-for="OtherCost" name="OtherCost" id="OtherCost" class="form-control form-control-lg budget-input-inhouse" type="number" step="0.01" min="0" value="0" style="border-radius: 10px;" />
                                                </div>

                                                <!-- ‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ -->
                                                <div class="col-md-6">
                                                    <label asp-for="OtherCostDescription" class="form-label fw-bold">üìù ‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ</label>
                                                    <input asp-for="OtherCostDescription" name="OtherCostDescription" class="form-control form-control-lg" placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ" style="border-radius: 10px;" />
                                                </div>

                                                <!-- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏ö‡∏£‡∏° -->
                                                <div class="col-md-6">
                                                    <label class="form-label fw-bold">üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏ö‡∏£‡∏°</label>
                                                    <input type="number" name="ParticipantCount" id="ParticipantCount" class="form-control form-control-lg" min="1" value="0" style="border-radius: 10px;" />
                                                </div>

                                                <!-- ‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ -->
                                                <!-- ‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (Read-only, ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥) -->
                                                <div class="col-12">
                                                    <hr class="my-3">
                                                    <div class="alert alert-success d-flex justify-content-between align-items-center" style="border-radius: 10px;">
                                                        <span class="fw-bold fs-5">üíµ ‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡∏ö‡∏≤‡∏ó):</span>
                                                        <span class="fw-bold fs-4 text-success" id="totalCostDisplay">0.00</span>
                                                    </div>
                                                    <input asp-for="TotalCost" name="TotalCost" type="hidden" id="totalCostInput" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <script>
                                    // ============================================================
                                    // üéØ TRAINING REQUEST FORM - FINAL CORRECT VERSION
                                    // ============================================================
                                    document.addEventListener('DOMContentLoaded', function() {
                                        console.log('‚úÖ Training Request Form Script Loaded - Final Correct Version');

                                        // ============================================================
                                        // üìÖ STEP 3: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ (Smart Date Handling)
                                        // ============================================================

                                        const startDateInput = document.getElementById('StartDate');
                                        const endDateInput = document.getElementById('EndDate');

                                        function addWorkingDays(date, days) {
                                            let currentDate = new Date(date);
                                            let addedDays = 0;

                                            while (addedDays < days) {
                                                currentDate.setDate(currentDate.getDate() + 1);
                                                if (currentDate.getDay() !== 0) {
                                                    addedDays++;
                                                }
                                            }

                                            return currentDate;
                                        }

                                        function setMinStartDate() {
                                            if (!startDateInput) return;

                                            const today = new Date();
                                            const minDate = addWorkingDays(today, 3);
                                            const minDateStr = minDate.toISOString().split('T')[0];
                                            startDateInput.setAttribute('min', minDateStr);

                                            console.log('üìÖ Min Start Date:', minDateStr);
                                        }

                                        if (startDateInput) {
                                            startDateInput.addEventListener('change', function() {
                                                const startDate = this.value;

                                                if (startDate) {
                                                    if (endDateInput) {
                                                        endDateInput.value = startDate;
                                                        endDateInput.setAttribute('min', startDate);
                                                    }

                                                    console.log('üìÖ Start Date Selected:', startDate);
                                                }
                                            });
                                        }

                                        if (endDateInput) {
                                            endDateInput.addEventListener('change', function() {
                                                const startDate = startDateInput ? startDateInput.value : '';
                                                const endDate = this.value;

                                                if (startDate && endDate && endDate < startDate) {
                                                    alert('‚ö†Ô∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏ö‡∏£‡∏°');
                                                    this.value = startDate;
                                                }
                                            });
                                        }

                                        setMinStartDate();

                                        // ============================================================
                                        // üî¢ STEP 2: Auto-clear ‡∏Ñ‡πà‡∏≤ 0 ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Focus
                                        // ============================================================

                                        const autoClearInputs = document.querySelectorAll('.budget-input-public, .budget-input-inhouse');

                                        autoClearInputs.forEach(input => {
                                            input.addEventListener('focus', function() {
                                                if (this.value === '0' || this.value === '0.00') {
                                                    this.value = '';
                                                }
                                            });

                                            input.addEventListener('blur', function() {
                                                if (this.value.trim() === '') {
                                                    this.value = '0';
                                                }
                                            });
                                        });

                                        console.log('‚úÖ Auto-clear setup for', autoClearInputs.length, 'inputs');

                                        // ============================================================
                                        // üí∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (Public) - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô
                                        // ============================================================

                                        const costPerPersonPublic = document.getElementById('CostPerPerson_Public');
                                        const totalCostDisplayPublic = document.getElementById('totalCostDisplayPublic');

                                        function calculateTotalBudgetPublic() {
                                            let total = 0;

                                            if (costPerPersonPublic) {
                                                total = parseFloat(costPerPersonPublic.value) || 0;
                                            }

                                            if (totalCostDisplayPublic) {
                                                totalCostDisplayPublic.textContent = total.toLocaleString('th-TH', {
                                                    minimumFractionDigits: 2,
                                                    maximumFractionDigits: 2
                                                });
                                            }

                                            console.log('üí∞ Total Budget (Public):', total.toFixed(2));

                                            return total;
                                        }

                                        if (costPerPersonPublic) {
                                            costPerPersonPublic.addEventListener('input', calculateTotalBudgetPublic);
                                            costPerPersonPublic.addEventListener('change', calculateTotalBudgetPublic);
                                        }

                                        // ============================================================
                                        // üí∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (In House) - 6 ‡∏ä‡πà‡∏≠‡∏á
                                        // ============================================================

                                        const budgetInputsInHouse = document.querySelectorAll('.budget-input-inhouse');
                                        const totalCostDisplayInHouse = document.getElementById('totalCostDisplayInHouse');

                                        function calculateTotalBudgetInHouse() {
                                            let total = 0;

                                            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å: ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏£ + ‡∏Ñ‡∏≠‡∏°‡πÅ‡∏°‡∏ô + ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå + ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ + ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                                            budgetInputsInHouse.forEach(input => {
                                                const value = parseFloat(input.value) || 0;
                                                total += value;
                                            });

                                            if (totalCostDisplayInHouse) {
                                                totalCostDisplayInHouse.textContent = total.toLocaleString('th-TH', {
                                                    minimumFractionDigits: 2,
                                                    maximumFractionDigits: 2
                                                });
                                            }

                                            console.log('üí∞ Total Budget (In House):', total.toFixed(2));

                                            return total;
                                        }

                                        budgetInputsInHouse.forEach(input => {
                                            input.addEventListener('input', calculateTotalBudgetInHouse);
                                            input.addEventListener('change', calculateTotalBudgetInHouse);
                                        });

                                        // ============================================================
                                        // üéØ STEP 4: ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°
                                        // ============================================================

                                        const budgetPublicCard = document.getElementById('budgetPublicCard');
                                        const budgetInHouseCard = document.getElementById('budgetInHouseCard');
                                        const trainingTypeRadios = document.querySelectorAll('input[name="TrainingType"]');

                                        function toggleBudgetCards() {
                                            const selectedType = document.querySelector('input[name="TrainingType"]:checked');
                                            const participantCountField = document.getElementById('ParticipantCount');

                                            if (!selectedType) {
                                                if (budgetPublicCard) budgetPublicCard.style.display = 'none';
                                                if (budgetInHouseCard) budgetInHouseCard.style.display = 'none';
                                                console.log('üîÑ No training type selected - hiding all budget cards');
                                                return;
                                            }

                                            const typeValue = selectedType.value;

                                            if (typeValue === 'Public') {
                                                if (budgetPublicCard) budgetPublicCard.style.display = 'block';
                                                if (budgetInHouseCard) budgetInHouseCard.style.display = 'none';

                                                // ‚úÖ ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡∏õ‡∏¥‡∏î validation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ParticipantCount ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Public
                                                if (participantCountField) {
                                                    participantCountField.removeAttribute('required');
                                                    participantCountField.removeAttribute('min');
                                                    participantCountField.value = '0';
                                                }

                                                console.log('‚úÖ Showing Public budget card (2 fields)');
                                                calculateTotalBudgetPublic();
                                            } else if (typeValue === 'In House') {
                                                if (budgetPublicCard) budgetPublicCard.style.display = 'none';
                                                if (budgetInHouseCard) budgetInHouseCard.style.display = 'block';

                                                // ‚úÖ ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡πÄ‡∏õ‡∏¥‡∏î validation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ParticipantCount ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å In House
                                                if (participantCountField) {
                                                    participantCountField.setAttribute('min', '1');
                                                    if (participantCountField.value === '0' || !participantCountField.value) {
                                                        participantCountField.value = '1';
                                                    }
                                                }

                                                console.log('‚úÖ Showing In House budget card (7 fields)');
                                                calculateTotalBudgetInHouse();
                                            }
                                        }

                                        trainingTypeRadios.forEach(radio => {
                                            radio.addEventListener('change', toggleBudgetCards);
                                        });

                                        toggleBudgetCards();

                                        // ============================================================
                                        // üìã Form Validation ‡πÅ‡∏•‡∏∞ Submit
                                        // ============================================================

                                        const form = document.getElementById('trainingRequestForm');

                                        if (form) {
                                            form.addEventListener('submit', function(e) {
                                                console.log('üìù Form Submit Started');

                                                const errors = [];

                                                const companyRadio = document.querySelector('input[name="Company"]:checked');
                                                if (!companyRadio) {
                                                    errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó');
                                                }

                                                const trainingTypeRadio = document.querySelector('input[name="TrainingType"]:checked');
                                                if (!trainingTypeRadio) {
                                                    errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°');
                                                }

                                                const startDate = startDateInput ? startDateInput.value : '';
                                                const endDate = endDateInput ? endDateInput.value : '';

                                                if (!startDate) {
                                                    errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏ö‡∏£‡∏°');
                                                }

                                                if (!endDate) {
                                                    errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°');
                                                }

                                                if (startDate && endDate && endDate < startDate) {
                                                    errors.push('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°');
                                                }

                                                const seminarTitle = document.getElementById('SeminarTitle');
                                                if (seminarTitle && !seminarTitle.value.trim()) {
                                                    errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏±‡∏°‡∏°‡∏ô‡∏≤');
                                                }

                                                const trainingLocation = document.getElementById('TrainingLocation');
                                                if (trainingLocation && !trainingLocation.value.trim()) {
                                                    errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏£‡∏°');
                                                }

                                                if (errors.length > 0) {
                                                    e.preventDefault();
                                                    alert('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n\n' + errors.join('\n'));
                                                    console.error('‚ùå Form validation failed:', errors);
                                                    return false;
                                                }

                                                const selectedType = document.querySelector('input[name="TrainingType"]:checked');
                                                if (selectedType && selectedType.value === 'Public') {
                                                    calculateTotalBudgetPublic();
                                                } else if (selectedType && selectedType.value === 'In House') {
                                                    calculateTotalBudgetInHouse();
                                                }

                                                console.log('‚úÖ Form validation passed');
                                                console.log('üì§ Submitting form...');

                                                return true;
                                            });
                                        }

                                        // ============================================================
                                        // ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
                                        // ============================================================

                                        console.log('===========================================');
                                        console.log('‚úÖ FINAL CORRECT VERSION LOADED');
                                        console.log('===========================================');
                                        console.log('üîµ Public: 2 fields (‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô + ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)');
                                        console.log('üü° In House: 7 fields');
                                        console.log('   1. ‡∏Ñ‡πà‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏£');
                                        console.log('   2. ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡πÅ‡∏°‡∏ô‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏£ ‚úÖ');
                                        console.log('   3. ‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå');
                                        console.log('   4. ‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£');
                                        console.log('   5. ‡∏≠‡∏∑‡πà‡∏ô‡πÜ');
                                        console.log('   6. ‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ');
                                        console.log('   7. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏ö‡∏£‡∏° ‚úÖ');
                                        console.log('===========================================');
                                        console.log('‚úÖ ‡∏ù‡πà‡∏≤‡∏¢/‡πÅ‡∏ú‡∏ô‡∏Å: Dropdown (‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Backend)');
                                        console.log('‚úÖ Auto-clear Zero - Ready');
                                        console.log('‚úÖ Smart Date Handling - Ready');
                                        console.log('‚úÖ Show/Hide Budget Cards - Ready');
                                        console.log('===========================================');
                                    });
                                </script>

                                <!-- ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏° -->
                                <div class="form-group mt-4">
                                    <label class="form-label fw-bold">üéØ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°‡∏™‡∏±‡∏°‡∏°‡∏ô‡∏≤:</label>
                                    <div class="card mt-3" style="background-color: #f8f9fa; border-radius: 12px;">
                                        <div class="card-body">
                                            <div class="row g-3">
                                                <div class="col-md-6">
                                                    <div class="form-check p-3" style="background-color: white; border-radius: 10px; border: 1px solid #dee2e6;">
                                                        <input class="form-check-input" type="radio" name="TrainingObjective" asp-for="TrainingObjective" value="‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≥‡∏ô‡∏≤‡∏ç" id="objective1">
                                                        <label class="form-check-label" for="objective1">‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≥‡∏ô‡∏≤‡∏ç</label>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-check p-3" style="background-color: white; border-radius: 10px; border: 1px solid #dee2e6;">
                                                        <input class="form-check-input" type="radio" name="TrainingObjective" asp-for="TrainingObjective" value="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û / ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û" id="objective2">
                                                        <label class="form-check-label" for="objective2">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û / ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û</label>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-check p-3" style="background-color: white; border-radius: 10px; border: 1px solid #dee2e6;">
                                                        <input class="form-check-input" type="radio" name="TrainingObjective" asp-for="TrainingObjective" value="‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç / ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤" id="objective3">
                                                        <label class="form-check-label" for="objective3">‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç / ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤</label>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-check p-3" style="background-color: white; border-radius: 10px; border: 1px solid #dee2e6;">
                                                        <input class="form-check-input" type="radio" name="TrainingObjective" asp-for="TrainingObjective" value="‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢/‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤" id="objective4">
                                                        <label class="form-check-label" for="objective4">‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢/‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</label>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="form-check p-3" style="background-color: white; border-radius: 10px; border: 1px solid #dee2e6;">
                                                        <input class="form-check-input" type="radio" name="TrainingObjective" asp-for="TrainingObjective" value="‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≠‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ/‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ú‡∏•‡∏™‡∏π‡πà‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô" id="objective5">
                                                        <label class="form-check-label" for="objective5">‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≠‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ/‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ú‡∏•‡∏™‡∏π‡πà‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô</label>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="p-3" style="background-color: white; border-radius: 10px; border: 1px solid #dee2e6;">
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="radio" name="TrainingObjective" asp-for="TrainingObjective" value="‡∏≠‡∏∑‡πà‡∏ô‡πÜ" id="objective6">
                                                            <label class="form-check-label" for="objective6">‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏£‡∏∞‡∏ö‡∏∏)</label>
                                                        </div>
                                                        <input type="text" class="form-control mt-2" asp-for="OtherObjective" id="OtherObjective" placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏≤‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'" style="border-radius: 8px;">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- ‡∏ú‡∏•‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö -->
                                <div class="form-group mt-4">
                                    <label asp-for="ExpectedOutcome" class="form-label fw-bold">üéØ ‡∏ú‡∏•‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö</label>
                                    <textarea asp-for="ExpectedOutcome" name="ExpectedOutcome" id="ExpectedOutcome" class="form-control" rows="3" style="border-radius: 10px;"></textarea>
                                </div>

                                <!-- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏° -->
                                <div class="mt-5">
                                    <div class="card border-0 shadow-lg" style="border-radius: 15px;">
                                        <div class="card-header bg-secondary py-3" style="border-radius: 15px 15px 0 0;">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <h4 class="mb-0 text-white fw-bold">
                                                    üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏≠‡∏ö‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                                                </h4>
                                                <button type="button" class="btn add-employee-btn text-white" data-bs-toggle="modal" data-bs-target="#employeeSearchModal">
                                                    <i class="fas fa-plus"></i>
                                                </button>
                                            </div>
                                        </div>

                                        <div class="card-body p-0">
                                            <div class="table-responsive">
                                                <table class="table table-bordered mb-0" style="font-size: 0.9rem;" id="employeeTable">
                                                    <thead>
                                                        <tr class="table-primary">
                                                            <th class="text-center py-3 fw-bold border-2" style="min-width: 80px; vertical-align: middle;">‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                                                            <th class="text-center py-3 fw-bold border-2" style="min-width: 100px; vertical-align: middle;">‡∏£‡∏´‡∏±‡∏™</th>
                                                            <th class="text-center py-3 fw-bold border-2" style="min-width: 150px; vertical-align: middle;">‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</th>
                                                            <th class="text-center py-3 fw-bold border-2" style="min-width: 120px; vertical-align: middle;">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</th>
                                                            <th class="text-center py-3 fw-bold border-2" colspan="2" style="background-color: #e3f2fd; min-width: 200px;">‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏° ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ</th>
                                                            <th class="text-center py-3 fw-bold border-2" colspan="2" style="background-color: #f3e5f5; min-width: 200px;">‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏° ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ</th>
                                                            <th class="text-center py-3 fw-bold border-2" style="min-width: 140px; vertical-align: middle;">
                                                                ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠<br>
                                                                <small>(‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤ 12 ‡∏ä‡∏°./‡∏õ‡∏µ)</small>
                                                            </th>
                                                            <th class="text-center py-3 fw-bold border-2" style="min-width: 140px; vertical-align: middle;">
                                                                ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠<br>
                                                                <small>(‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤ 10,000 ‡∏ö./‡∏õ‡∏µ)</small>
                                                            </th>
                                                            <th class="text-center py-3 fw-bold border-2" style="min-width: 160px; vertical-align: middle;">
                                                                ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏ö‡∏£‡∏°<br>
                                                                <small>‡∏ï‡∏•‡∏≠‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏á‡∏≤‡∏ô</small>
                                                            </th>
                                                            <th class="text-center py-3 fw-bold border-2" style="min-width: 120px; vertical-align: middle;">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
                                                            <th class="text-center py-3 fw-bold border-2" style="min-width: 80px; vertical-align: middle;">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                                                        </tr>
                                                        <tr class="table-light">
                                                            <th colspan="4" class="p-3 border-2"></th>
                                                            <th class="text-center py-2 fw-semibold border-2" style="background-color: #e3f2fd;">‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏™‡∏∞‡∏™‡∏°‡∏õ‡∏µ‡∏ô‡∏µ‡πâ</th>
                                                            <th class="text-center py-2 fw-semibold border-2" style="background-color: #e3f2fd;">‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏∞‡∏™‡∏°‡∏õ‡∏µ‡∏ô‡∏µ‡πâ</th>
                                                            <th class="text-center py-2 fw-semibold border-2" style="background-color: #f3e5f5;">‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏™‡∏∞‡∏™‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ</th>
                                                            <th class="text-center py-2 fw-semibold border-2" style="background-color: #f3e5f5;">‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ</th>
                                                            <th colspan="5" class="p-3 border-2"></th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="employeeTableBody">
                                                        <!-- Dynamic rows will be inserted here -->
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° -->
                                <div class="form-group mt-4">
                                    <label asp-for="URLSource" class="form-label fw-bold">üîó ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤ URL (‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)</label>
                                    <input asp-for="URLSource" name="URLSource" id="URLSource" class="form-control form-control-lg" type="url" placeholder="https://example.com" onkeypress="return false;" style="border-radius: 10px;" />
                                </div>

                                <div class="form-group">
                                    <label asp-for="AdditionalNotes" class="form-label fw-bold">üìù ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ HR ‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
                                    <textarea asp-for="AdditionalNotes" name="AdditionalNotes" id="AdditionalNotes" class="form-control" rows="3" style="border-radius: 10px;"></textarea>
                                </div>

                                <div class="form-group mt-4">
                                    <label asp-for="AttachedFiles" class="form-label fw-bold">üìé ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö</label>
                                    <input asp-for="AttachedFiles" id="AttachedFiles" class="form-control form-control-lg" type="file" style="border-radius: 10px;" />
                                </div>

                                <!-- ‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ 3 ‡∏£‡∏∞‡∏î‡∏±‡∏ö -->
                                <hr class="my-4">
                                <h5 class="fw-bold mb-3">üë• ‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h5>

                                <div class="form-group mt-3">
                                    <label class="form-label fw-bold">
                                        üë§ Section Manager
                                        <small class="text-muted">(‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å ‡∏ù‡πà‡∏≤‡∏¢ + ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)</small>
                                    </label>
                                    <select id="sectionManagerSelect" class="form-select form-select-lg" style="width: 100%; border-radius: 10px;">
                                        <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Section Manager --</option>
                                    </select>
                                    <input type="hidden" id="sectionManagerIdHidden" name="SectionManagerId" value="" />
                                </div>

                                <div class="form-group mt-3">
                                    <label class="form-label fw-bold">
                                        üë§ Department Manager
                                        <small class="text-muted">(‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å ‡∏ù‡πà‡∏≤‡∏¢ + ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)</small>
                                    </label>
                                    <select id="departmentManagerSelect" class="form-select form-select-lg" style="width: 100%; border-radius: 10px;">
                                        <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Department Manager --</option>
                                    </select>
                                    <input type="hidden" id="departmentManagerIdHidden" name="DepartmentManagerId" value="" />
                                </div>

                                <div class="form-group mt-3">
                                    <label class="form-label fw-bold">
                                        üë§ Managing Director
                                        <small class="text-muted">(Director / AMD / DMD / MD / CEO)</small>
                                    </label>
                                    <select id="managingDirectorSelect" class="form-select form-select-lg" style="width: 100%; border-radius: 10px;">
                                        <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Managing Director --</option>
                                    </select>
                                    <input type="hidden" id="managingDirectorIdHidden" name="ManagingDirectorId" value="" />
                                </div>

                                <!-- ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å -->
                                <div class="text-center mt-5">
                                    <button type="submit" class="btn btn-primary btn-lg text-white px-5 py-3 fw-bold" style="border-radius: 25px; box-shadow: 0 4px 15px rgba(13, 110, 253, 0.3);">
                                        üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Employee Search Modal -->
<div class="modal fade" id="employeeSearchModal" tabindex="-1" aria-labelledby="employeeSearchModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" style="border-radius: 15px;">
            <div class="modal-header bg-primary text-white" style="border-radius: 15px 15px 0 0;">
                <h5 class="modal-title" id="employeeSearchModalLabel">
                    <i class="fas fa-search me-2"></i>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <div class="row g-3">
                    <div class="col-md-8">
                        <label for="employeeCode" class="form-label fw-bold">üÜî ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</label>
                        <input type="text" class="form-control form-control-lg" id="employeeCode" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô" style="border-radius: 10px;">
                    </div>
                    <div class="col-md-4 d-flex align-items-end">
                        <button type="button" class="btn btn-success btn-lg w-100" id="searchEmployeeBtn" style="border-radius: 10px;">
                            <i class="fas fa-search me-2"></i>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                        </button>
                    </div>
                </div>

                <!-- Loading Spinner -->
                <div class="text-center mt-4 loading-spinner" id="loadingSpinner">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
                </div>

                <!-- Employee Information Display -->
                <div class="mt-4" id="employeeInfoSection" style="display: none;">
                    <div class="card border-success">
                        <div class="card-header bg-success text-white">
                            <h6 class="mb-0"><i class="fas fa-user me-2"></i>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label fw-bold">‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:</label>
                                    <p class="form-control-plaintext fw-semibold" id="displayEmpCode">-</p>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label fw-bold">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</label>
                                    <p class="form-control-plaintext fw-semibold" id="displayFullName">-</p>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label fw-bold">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:</label>
                                    <p class="form-control-plaintext fw-semibold" id="displayPosition">-</p>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label fw-bold">‡∏£‡∏∞‡∏î‡∏±‡∏ö:</label>
                                    <p class="form-control-plaintext fw-semibold" id="displayLevel">-</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Error Message -->
                <div class="alert alert-danger mt-4" id="errorMessage" style="display: none;">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <span id="errorText">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
                <button type="button" class="btn btn-primary" id="addEmployeeBtn" disabled>
                    <i class="fas fa-plus me-2"></i>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
                </button>
            </div>
        </div>
    </div>
</div>




<!-- CSS ‡πÅ‡∏•‡∏∞ JavaScript -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">

<!-- ‚úÖ Select2 CSS -->
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />

<style>
    .form-control:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }

    .form-check-input:checked {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(13, 110, 253, 0.5) !important;
        transition: all 0.3s ease;
    }

    .table th, .table td {
        vertical-align: middle;
    }

    .table-bordered > :not(caption) > * > * {
        border-width: 2px;
    }

    .card {
        transition: all 0.3s ease;
    }

    .form-control:hover {
        border-color: #86b7fe;
        transition: all 0.3s ease;
    }

    .badge {
        transition: all 0.3s ease;
    }

        .badge:hover {
            transform: scale(1.05);
        }

    .form-check-input {
        transition: all 0.3s ease;
    }

        .form-check-input:hover {
            transform: scale(1.1);
        }

    .table-bordered {
        border: 3px solid #dee2e6;
    }

    .border-2 {
        border-width: 2px !important;
        border-color: #6c757d !important;
    }

    .add-employee-btn {
        background: linear-gradient(45deg, #28a745, #20c997);
        border: none;
        border-radius: 50%;
        width: 45px;
        height: 45px;
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
    }

        .add-employee-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 20px rgba(40, 167, 69, 0.5);
        }

    .employee-row {
        animation: fadeInDown 0.5s ease-out;
    }

    @@keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .loading-spinner {
        display: none;
    }

    /* ===== Select2 Custom Styling ===== */
    .select2-container--bootstrap-5 .select2-selection--multiple {
        min-height: 48px !important;
        border-radius: 10px !important;
        padding: 8px !important;
        border: 1px solid #ced4da !important;
    }

        .select2-container--bootstrap-5 .select2-selection--multiple .select2-selection__choice {
            background-color: #007bff !important;
            border: none !important;
            color: white !important;
            border-radius: 6px !important;
            padding: 5px 10px !important;
            margin: 3px !important;
            font-size: 14px !important;
        }

        .select2-container--bootstrap-5 .select2-selection--multiple .select2-selection__choice__remove {
            color: white !important;
            margin-right: 5px !important;
            font-weight: bold !important;
        }

            .select2-container--bootstrap-5 .select2-selection--multiple .select2-selection__choice__remove:hover {
                color: #ff4444 !important;
            }

    .select2-results__option {
        padding: 10px !important;
    }

        .select2-results__option strong {
            color: #007bff;
            display: block;
            margin-bottom: 3px;
        }

        .select2-results__option small {
            color: #6c757d;
        }

</style>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- ‚úÖ jQuery (Select2 ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- ‚úÖ Select2 JS -->
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

<script>

    // ====================================================================
    // üîÑ Reset ‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÅ‡∏•‡∏∞ Disable (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
    // ====================================================================
    function resetUnusedFields() {
        const trainingType = document.querySelector('input[name="TrainingType"]:checked')?.value;

        console.log(`üîÑ Training Type Changed: ${trainingType}`);

        if (trainingType === 'Public') {
            // Enable Public fields
            const publicFields = ['CostPerPerson', 'TrainingHours'];
            publicFields.forEach(id => {
                const input = document.getElementById(id);
                if (input) {
                    input.disabled = false;
                    console.log(`‚úÖ Enabled: ${id}`);
                }
            });

            // Disable In House fields
            const inHouseFields = [
                'RegistrationCost',
                'InstructorFee',
                'InstructorCommission',
                'EquipmentCost',
                'FoodCost',
                'OtherCost'
            ];

            inHouseFields.forEach(id => {
                const input = document.getElementById(id);
                if (input) {
                    input.value = '0';
                    input.disabled = true;
                    console.log(`‚úÖ Reset & Disabled: ${id}`);
                }
            });

            console.log('‚úÖ Public enabled, In House disabled');

        } else if (trainingType === 'In House') {
            // Enable In House fields
            const inHouseFields = [
                'RegistrationCost',
                'InstructorFee',
                'InstructorCommission',
                'EquipmentCost',
                'FoodCost',
                'OtherCost'
            ];

            inHouseFields.forEach(id => {
                const input = document.getElementById(id);
                if (input) {
                    input.disabled = false;
                    console.log(`‚úÖ Enabled: ${id}`);
                }
            });

            // Disable Public fields
            const publicFields = ['CostPerPerson', 'TrainingHours'];

            publicFields.forEach(id => {
                const input = document.getElementById(id);
                if (input) {
                    input.value = '0';
                    input.disabled = true; // ‚≠ê ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ validation
                    console.log(`‚úÖ Reset & Disabled: ${id}`);
                }
            });

            console.log('‚úÖ In House enabled, Public disabled');
        }

        calculateTotalCost();
    }

    // ====================================================================
    // üí∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (Version ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
    // ====================================================================
    function calculateTotalCost() {
        try {
            // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å In House Fields
            const registrationCost = parseFloat(document.getElementById('RegistrationCost')?.value || 0);
            const instructorFee = parseFloat(document.getElementById('InstructorFee')?.value || 0);
            const instructorCommission = parseFloat(document.getElementById('InstructorCommission')?.value || 0);
            const equipmentCost = parseFloat(document.getElementById('EquipmentCost')?.value || 0);
            const foodCost = parseFloat(document.getElementById('FoodCost')?.value || 0);
            const otherCost = parseFloat(document.getElementById('OtherCost')?.value || 0);

            // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Public Fields
            const costPerPerson = parseFloat(document.getElementById('CostPerPerson')?.value || 0);
            const trainingHours = parseFloat(document.getElementById('TrainingHours')?.value || 0);

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô
            const inHouseTotal = registrationCost + instructorFee + instructorCommission +
                                equipmentCost + foodCost + otherCost;
            const publicTotal = costPerPerson ;
            const total = inHouseTotal + publicTotal;

            // Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠ Debug
            console.log('üí∞ Calculating Total:', {
                inHouse: {
                    registrationCost,
                    instructorFee,
                    instructorCommission,
                    equipmentCost,
                    foodCost,
                    otherCost,
                    subtotal: inHouseTotal
                },
                public: {
                    costPerPerson,
                    
                    subtotal: publicTotal
                },
                grandTotal: total
            });

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            const displayConfigs = [
                { id: 'totalCostDisplay', label: 'In House Display' },
                { id: 'totalCostDisplayPublic', label: 'Public Display' }
            ];

            displayConfigs.forEach(config => {
                const element = document.getElementById(config.id);
                if (element) {
                    element.textContent = total.toLocaleString('th-TH', {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    });
                }
            });

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Hidden Input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ Backend
            const inputElement = document.getElementById('totalCostInput');
            if (inputElement) {
                inputElement.value = total.toFixed(2);
            }

            return total;

        } catch (error) {
            console.error('‚ùå Error calculating total cost:', error);
            return 0;
        }
    }

    // ====================================================================
    // üîß ‡∏ú‡∏π‡∏Å Event Listeners ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å Input
    // ====================================================================
    function initializeBudgetCalculation() {
        console.log('üîß Initializing budget calculation...');

        // ====================================================================
        // üîÑ Auto-clear ‡∏Ñ‡πà‡∏≤ 0 ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Focus ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 0 ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Blur
        // ====================================================================
        const autoClearInputs = document.querySelectorAll('.budget-input, .budget-input-public, .budget-input-inhouse');

        autoClearInputs.forEach(input => {
            // Clear ‡∏Ñ‡πà‡∏≤ 0 ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Focus
            input.addEventListener('focus', function() {
                if (this.value === '0' || this.value === '0.00') {
                    this.value = '';
                }
            });

            // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 0 ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Blur ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
            input.addEventListener('blur', function() {
                if (this.value.trim() === '') {
                    this.value = '0';
                }
            });
        });

        console.log(`‚úÖ Auto-clear setup for ${autoClearInputs.length} inputs`);

        // ====================================================================
        // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Input ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (In House + Public)
        // ====================================================================
        const budgetInputIds = [
            // In House Fields
            'RegistrationCost',
            'InstructorFee',
            'InstructorCommission',
            'EquipmentCost',
            'FoodCost',
            'OtherCost',
            // Public Fields
            'CostPerPerson',
            'TrainingHours'
        ];

        let foundCount = 0;
        let notFoundInputs = [];

        budgetInputIds.forEach(id => {
            const input = document.getElementById(id);
            if (input) {
                foundCount++;
                console.log(`‚úÖ Found & Bound: ${id}`);
                // ‡∏ú‡∏π‡∏Å Event Listeners ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö
                ['input', 'change', 'keyup', 'blur'].forEach(eventType => {
                    input.addEventListener(eventType, calculateTotalCost);
                });
            } else {
                notFoundInputs.push(id);
                console.warn(`‚ö†Ô∏è Input not found: ${id}`);
            }
        });

        // ‚≠ê ‡∏ú‡∏π‡∏Å Event Listener ‡∏Å‡∏±‡∏ö Training Type Radio Buttons
        const trainingTypeRadios = document.querySelectorAll('input[name="TrainingType"]');
        trainingTypeRadios.forEach(radio => {
            radio.addEventListener('change', resetUnusedFields);
            console.log(`‚úÖ Bound Training Type: ${radio.value}`);
        });

        // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å
        console.log(`üìä Summary: ${foundCount}/${budgetInputIds.length} inputs bound`);
        console.log(`üìª Training Type radios: ${trainingTypeRadios.length} bound`);

        if (notFoundInputs.length > 0) {
            console.warn(`‚ö†Ô∏è Missing inputs: ${notFoundInputs.join(', ')}`);
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
        calculateTotalCost();

        console.log('‚úÖ Budget calculation initialized successfully!');
    }

    // ====================================================================
    // üöÄ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ DOM ‡∏û‡∏£‡πâ‡∏≠‡∏°
    // ====================================================================
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeBudgetCalculation);
    } else {
        initializeBudgetCalculation();
    }

    // ====================================================================
    // 0. Load Departments and Positions - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
    // ====================================================================
    document.addEventListener('DOMContentLoaded', async function() {
        console.log('üöÄ Page loaded!');
        await loadDepartmentsAndPositions();

        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ DOM ‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ initialize
        setTimeout(() => {
            initializeBudgetCalculation();
        }, 100);
    });

    async function loadDepartmentsAndPositions() {
        try {
            const response = await fetch('/api/employee/departments-positions');

            if (response.ok) {
                const result = await response.json();

                if (result.success) {
                    const departmentSelect = document.getElementById('departmentSelect');
                    if (departmentSelect && result.departments) {
                        result.departments.forEach(dept => {
                            const option = document.createElement('option');
                            option.value = dept;
                            option.textContent = dept;
                            departmentSelect.appendChild(option);
                        });
                    }

                    const positionSelect = document.getElementById('positionSelect');
                    if (positionSelect && result.positions) {
                        result.positions.forEach(pos => {
                            const option = document.createElement('option');
                            option.value = pos;
                            option.textContent = pos;
                            positionSelect.appendChild(option);
                        });
                    }

                    console.log('‚úÖ Loaded departments:', result.departments.length);
                    console.log('‚úÖ Loaded positions:', result.positions.length);
                } else {
                    console.error('‚ùå Failed to load departments and positions');
                }
            } else {
                console.error('‚ùå API Error:', response.status);
            }
        } catch (error) {
            console.error('‚ùå Error loading departments and positions:', error);
        }
    }

    // ====================================================================
    // 1. Employee Manager Class
    // ====================================================================
    // ‚ú® ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï EmployeeManager class
    class EmployeeManager {
        constructor() {
            this.employees = [];
            this.currentEmployee = null;
            this.rowCounter = 1;
            this.initializeEvents();
        }

        initializeEvents() {
            document.getElementById('searchEmployeeBtn').addEventListener('click', () => {
                this.searchEmployee();
            });

            document.getElementById('employeeCode').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.searchEmployee();
                }
            });

            document.getElementById('addEmployeeBtn').addEventListener('click', () => {
                this.addEmployeeToTable();
            });

            document.getElementById('employeeSearchModal').addEventListener('hidden.bs.modal', () => {
                this.resetModal();
            });
        }

        async searchEmployee() {
            const employeeCode = document.getElementById('employeeCode').value.trim();

            if (!employeeCode) {
                this.showError('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô');
                return;
            }

            if (employeeCode.length !== 7) {
                this.showError('‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 7 ‡∏´‡∏•‡∏±‡∏Å');
                return;
            }

            this.showLoading(true);
            this.hideEmployeeInfo();
            this.hideError();

            try {
                const employee = await this.fetchEmployeeData(employeeCode);

                if (employee) {
                    this.currentEmployee = employee;
                    this.displayEmployeeInfo(employee);
                    document.getElementById('addEmployeeBtn').disabled = false;
                } else {
                    this.showError('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™: ' + employeeCode);
                }
            } catch (error) {
                console.error('Error searching employee:', error);
                this.showError('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            } finally {
                this.showLoading(false);
            }
        }

        async fetchEmployeeData(employeeCode) {
            try {
                console.log('üîç Searching for employee:', employeeCode);

                const response = await fetch(`/api/employee/search/${employeeCode}`);

                console.log('üì° Response status:', response.status);

                if (!response.ok) {
                    console.error('‚ùå Response not OK:', response.status);

                    try {
                        const errorData = await response.json();
                        console.error('‚ùå Error data:', errorData);
                    } catch {
                        console.error('‚ùå Could not parse error as JSON');
                    }

                    return null;
                }

                const result = await response.json();
                console.log('‚úÖ API Response:', result);
                console.log('üìä API Response (JSON):', JSON.stringify(result, null, 2));

                console.log('üîç result.success:', result.success);
                console.log('üîç result.employee:', result.employee);
                console.log('üîç Has employee?', !!result.employee);

                if (result.success && result.employee) {
                    if (result.warningMessage) {
                        this.showWarning(result.warningMessage);
                    }

                    return {
                        empCode: result.employee.empCode,
                        prefix: result.employee.prefix,
                        name: result.employee.name,
                        lastname: result.employee.lastname,
                        position: result.employee.position,
                        level: result.employee.level,
                        department: result.employee.department,
                        company: result.employee.company,
                        email: result.employee.email,
                        currentYearHours: result.employee.currentYearHours || 0,
                        currentYearCost: result.employee.currentYearCost || 0,
                        thisTimeHours: result.employee.thisTimeHours || 0,
                        thisTimeCost: result.employee.thisTimeCost || 0,
                        remainingHours: result.employee.remainingHours ?? 0,
                        remainingCost: result.employee.remainingCost ?? 0,
                        pendingRequestCount: result.employee.pendingRequestCount || 0,
                        pendingHours: result.employee.pendingHours || 0,
                        pendingCost: result.employee.pendingCost || 0
                    };
                } else {
                    console.error('‚ùå API returned success=false or no employee data');
                    return null;
                }
            } catch (error) {
                console.error('‚ùå Error fetching employee:', error);
                throw error;
            }
        }

        displayEmployeeInfo(employee) {
            document.getElementById('displayEmpCode').textContent = employee.empCode;
            document.getElementById('displayFullName').textContent =
                `${employee.prefix}${employee.name} ${employee.lastname}`;
            document.getElementById('displayPosition').textContent = employee.position;
            document.getElementById('displayLevel').textContent = employee.level;

            this.showEmployeeInfo();
        }

            addEmployeeToTable() {
        if (!this.currentEmployee) return;

        if (this.employees.some(emp => emp.empCode === this.currentEmployee.empCode)) {
            this.showError('‚ùå ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß');
            return;
        }

        // ‚≠ê ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
        const trainingHoursInput = document.getElementById('TrainingHours');
        const costPerPersonInput = document.getElementById('CostPerPerson');

        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0
        const trainingHours = trainingHoursInput ? parseFloat(trainingHoursInput.value) || 0 : 0;
        const costPerPerson = costPerPersonInput ? parseFloat(costPerPersonInput.value) || 0 : 0;

        console.log('üìä Training Hours from form:', trainingHours);
        console.log('üí∞ Cost Per Person from form:', costPerPerson);

        // ‚≠ê ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô currentEmployee
        this.currentEmployee.thisTimeHours = trainingHours;
        this.currentEmployee.thisTimeCost = costPerPerson;

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
        this.currentEmployee.remainingHours = 12 - (this.currentEmployee.currentYearHours + trainingHours);
        this.currentEmployee.remainingCost = 10000 - (this.currentEmployee.currentYearCost + costPerPerson);

        console.log('‚úÖ Updated employee:', {
            empCode: this.currentEmployee.empCode,
            thisTimeHours: this.currentEmployee.thisTimeHours,
            thisTimeCost: this.currentEmployee.thisTimeCost,
            remainingHours: this.currentEmployee.remainingHours,
            remainingCost: this.currentEmployee.remainingCost
        });

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á array
        this.employees.push(this.currentEmployee);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        const row = this.createEmployeeRow(this.currentEmployee, this.rowCounter);
        document.getElementById('employeeTableBody').appendChild(row);

        this.rowCounter++;

        // ‡∏õ‡∏¥‡∏î modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('employeeSearchModal'));
        modal.hide();

        this.showSuccessToast('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    }

        createEmployeeRow(employee, rowNumber) {
            const row = document.createElement('tr');
            row.className = 'table-light employee-row';
            row.dataset.empCode = employee.empCode;

            const trainingData = {
                currentYearHours: employee.currentYearHours || 0,
                currentYearCost: employee.currentYearCost || 0,
                thisTimeHours: employee.thisTimeHours || 0,
                thisTimeCost: employee.thisTimeCost || 0
            };

            const remainingHours = employee.remainingHours ?? 0;
            const remainingCost = employee.remainingCost ?? 0;

            const hoursColorClass = remainingHours >= 0 ? '#e8f5e8' : '#ffebee';
            const hoursTextClass = remainingHours >= 0 ? 'bg-success' : 'bg-danger';
            const costColorClass = remainingCost >= 0 ? '#e8f5e8' : '#ffebee';
            const costTextClass = remainingCost >= 0 ? 'bg-success' : 'bg-danger';

            row.innerHTML = `
                <td class="text-center py-3 fw-bold border-2" style="background-color: #f8f9fa;">
                    <span class="badge bg-primary px-3 py-2">${rowNumber}</span>
                </td>
                <td class="text-center py-3 fw-semibold border-2">
                    <span class="badge bg-light text-dark px-3 py-2">${employee.empCode}</span>
                </td>
                <td class="text-center py-3 fw-semibold border-2">
                    ${employee.prefix}${employee.name} ${employee.lastname}
                </td>
                <td class="text-center py-3 fw-medium border-2">
                    <span class="badge bg-info text-white px-3 py-2">${employee.position}</span>
                </td>
                <td class="text-center py-3 fw-bold border-2" style="background-color: #e3f2fd; color: #1976d2; font-size: 1.1rem;">
                    ${trainingData.currentYearHours}
                </td>
                <td class="text-center py-3 fw-bold border-2" style="background-color: #e3f2fd; color: #1976d2; font-size: 1.1rem;">
                    ${trainingData.currentYearCost.toLocaleString()}
                </td>
                <td class="text-center py-3 fw-bold border-2" style="background-color: #f3e5f5; color: #7b1fa2; font-size: 1.1rem;">
                    ${trainingData.thisTimeHours}
                </td>
                <td class="text-center py-3 fw-bold border-2" style="background-color: #f3e5f5; color: #7b1fa2; font-size: 1.1rem;">
                    ${trainingData.thisTimeCost.toLocaleString()}
                </td>
                <td class="text-center py-3 fw-bold border-2" style="background-color: ${hoursColorClass};">
                    <span class="badge ${hoursTextClass} text-white px-3 py-2" style="font-size: 1rem;">
                        ${remainingHours}
                    </span>
                </td>
                <td class="text-center py-3 fw-bold border-2" style="background-color: ${costColorClass};">
                    <span class="badge ${costTextClass} text-white px-3 py-2" style="font-size: 1rem;">
                        ${remainingCost.toLocaleString()}
                    </span>
                </td>
                <td class="text-center py-3 border-2" style="background-color: #f0f8ff;">
                    <i class="fas fa-check-circle text-success" style="font-size: 1.5rem;"></i>
                </td>
                <td class="text-center py-3 border-2">
                    <input type="text" class="form-control form-control-sm note-input" data-emp-code="${employee.empCode}" placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏" style="border-radius: 8px;">
                </td>
                <td class="text-center py-3 border-2">
                    <button type="button" class="btn btn-sm btn-danger" onclick="employeeManager.removeEmployee('${employee.empCode}')">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            `;

            return row;
        }

        removeEmployee(empCode) {
            if (confirm('‚ùì ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                this.employees = this.employees.filter(emp => emp.empCode !== empCode);

                const row = document.querySelector(`tr[data-emp-code="${empCode}"]`);
                if (row) {
                    row.remove();
                }

                this.updateRowNumbers();
                this.showSuccessToast('‚úÖ ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
            }
        }

        updateRowNumbers() {
            const rows = document.querySelectorAll('#employeeTableBody tr');
            rows.forEach((row, index) => {
                const numberCell = row.querySelector('.badge.bg-primary');
                if (numberCell) {
                    numberCell.textContent = index + 1;
                }
            });
            this.rowCounter = rows.length + 1;
        }

        showWarning(message) {
            const warningDiv = document.createElement('div');
            warningDiv.className = 'alert alert-warning mt-3';
            warningDiv.innerHTML = `<i class="fas fa-exclamation-triangle me-2"></i>${message}`;

            const infoSection = document.getElementById('employeeInfoSection');
            infoSection.appendChild(warningDiv);
        }

        showLoading(show) {
            document.getElementById('loadingSpinner').style.display = show ? 'block' : 'none';
        }

        showEmployeeInfo() {
            document.getElementById('employeeInfoSection').style.display = 'block';
        }

        hideEmployeeInfo() {
            document.getElementById('employeeInfoSection').style.display = 'none';
            document.getElementById('addEmployeeBtn').disabled = true;
        }

        showError(message) {
            document.getElementById('errorText').textContent = message;
            document.getElementById('errorMessage').style.display = 'block';
        }

        hideError() {
            document.getElementById('errorMessage').style.display = 'none';
        }

        resetModal() {
            document.getElementById('employeeCode').value = '';
            this.hideEmployeeInfo();
            this.hideError();
            this.showLoading(false);
            this.currentEmployee = null;
        }

        showSuccessToast(message) {
    const toast = document.createElement('div');
    toast.className = 'position-fixed top-0 end-0 m-4 alert alert-success alert-dismissible fade show';
    toast.style.zIndex = '9999';
    toast.innerHTML = `
        <i class="fas fa-check-circle me-2"></i>${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.body.appendChild(toast);

    setTimeout(() => {
        if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
        }
    }, 3000);
}

getEmployeesData() {  // ‚úÖ ‡∏ñ‡∏π‡∏Å - ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô class
    console.log('üìä Getting employees data...');
    console.log('   Total employees:', this.employees.length);

    if (!this.employees || this.employees.length === 0) {
        console.warn('‚ö†Ô∏è No employees in list');
        return [];
    }

    const employeesData = this.employees.map((emp, index) => {
        console.log(`   Employee ${index + 1}:`, emp.empCode);
             // ‚≠ê ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            const noteInput = document.querySelector(`input.note-input[data-emp-code="${emp.empCode}"]`);
            const notes = noteInput ? noteInput.value.trim() : '';
                 console.log(`     Notes for ${emp.empCode}:`, notes || '(empty)');

        return {
            empCode: emp.empCode || '',
            fullName: `${emp.prefix || ''}${emp.name || ''} ${emp.lastname || ''}`.trim(),
            position: emp.position || '',
            currentYearHours: emp.currentYearHours || 0,
            currentYearCost: emp.currentYearCost || 0,
            thisTimeHours: emp.thisTimeHours || 0,
            thisTimeCost: emp.thisTimeCost || 0,
            notes: notes
        };
    });

    console.log('‚úÖ Employees data prepared:', employeesData);
    return employeesData;
}
    }

    // ‚≠ê Initialize - ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å class
    const employeeManager = new EmployeeManager();
    console.log('‚úÖ EmployeeManager initialized');


        // ===============================================
    // üîπ Cascade Dropdown: Department ‚Üí Position
    // ===============================================

    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Departments ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
    document.addEventListener('DOMContentLoaded', async function() {
        await loadDepartments();
    });
       // ===============================================
    // Multi-Select Email
    // ===============================================
    $(document).ready(function() {
        console.log('üîß Initializing CCEmail Select2...');

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ element
        if ($('#ccEmailSelect').length === 0) {
            console.error('‚ùå #ccEmailSelect not found!');
            return;
        }

        // Initialize Select2
        $('#ccEmailSelect').select2({
            theme: 'bootstrap-5',
            placeholder: '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•...',
            allowClear: true,
            multiple: true,
            width: '100%',
            ajax: {
                url: '/api/employees/emails/search',
                dataType: 'json',
                delay: 300,
                data: function (params) {
                    console.log('üîç Searching:', params.term);
                    return { q: params.term || '' };
                },
                processResults: function (data) {
                    console.log('üìß Found:', data.length, 'emails');
                    return {
                        results: data.map(function(item) {
                            return {
                                id: item.email,
                                text: item.email + ' (' + item.name + ')'
                            };
                        })
                    };
                },
                cache: true
            },
            minimumInputLength: 0
        });

        // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å - ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ;
        $('#ccEmailSelect').on('change', function() {
            const emails = $(this).val() || [];
            const container = $('#ccEmailHiddenInputs');
            container.empty();

            if (emails.length > 0) {
                // ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô string ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ;
                const emailString = emails.join(';');
                container.append('<input type="hidden" name="CCEmail" value="' + emailString + '" />');
                console.log('‚úÖ CCEmail:', emailString);
                console.log('‚úÖ Count:', emails.length, 'emails');
            } else {
                console.log('‚ö†Ô∏è No emails selected');
            }
        });

        console.log('‚úÖ CCEmail Select2 initialized');
    });

    // ====================================================================
    // Approvers Select2 Initialization (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô CCEmail ‡πÅ‡∏ï‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà 1 ‡∏Ñ‡∏ô)
    // ====================================================================
    $(document).ready(function() {
        console.log('üîß Initializing Approvers Select2...');

        // 1Ô∏è‚É£ Section Manager Select2
        $('#sectionManagerSelect').select2({
            theme: 'bootstrap-5',
            placeholder: '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Section Manager...',
            allowClear: true,
            multiple: false, // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà 1 ‡∏Ñ‡∏ô
            width: '100%',
            ajax: {
                url: '/api/employees/approvers/section-manager',
                dataType: 'json',
                delay: 300,
                data: function (params) {
                    const department = $('#departmentSelect').val();
                    const position = $('#positionSelect').val();
                    console.log('üîç Searching Section Manager:', params.term);
                    return {
                        q: params.term || '',
                        department: department || '',
                        position: position || ''
                    };
                },
                processResults: function (data) {
                    console.log('üìã Section Managers found:', data.length);
                    return {
                        results: data.map(function(item) {
                            return {
                                id: item.id,
                                text: item.name + ' (' + item.department + ' - ' + item.level + ')'
                            };
                        })
                    };
                },
                cache: false
            },
            minimumInputLength: 0
        });

        $('#sectionManagerSelect').on('change', function() {
            const selectedValue = $(this).val();
            $('#sectionManagerIdHidden').val(selectedValue || '');
            console.log('‚úÖ Section Manager selected:', selectedValue);
        });

        // 2Ô∏è‚É£ Department Manager Select2
        $('#departmentManagerSelect').select2({
            theme: 'bootstrap-5',
            placeholder: '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Department Manager...',
            allowClear: true,
            multiple: false, // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà 1 ‡∏Ñ‡∏ô
            width: '100%',
            ajax: {
                url: '/api/employees/approvers/department-manager',
                dataType: 'json',
                delay: 300,
                data: function (params) {
                    const department = $('#departmentSelect').val();
                    const position = $('#positionSelect').val();
                    console.log('üîç Searching Department Manager:', params.term);
                    return {
                        q: params.term || '',
                        department: department || '',
                        position: position || ''
                    };
                },
                processResults: function (data) {
                    console.log('üìã Department Managers found:', data.length);
                    return {
                        results: data.map(function(item) {
                            return {
                                id: item.id,
                                text: item.name + ' (' + item.department + ' - ' + item.level + ')'
                            };
                        })
                    };
                },
                cache: false
            },
            minimumInputLength: 0
        });

        $('#departmentManagerSelect').on('change', function() {
            const selectedValue = $(this).val();
            $('#departmentManagerIdHidden').val(selectedValue || '');
            console.log('‚úÖ Department Manager selected:', selectedValue);
        });

        // 3Ô∏è‚É£ Managing Director Select2
        $('#managingDirectorSelect').select2({
            theme: 'bootstrap-5',
            placeholder: '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Managing Director...',
            allowClear: true,
            multiple: false, // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà 1 ‡∏Ñ‡∏ô
            width: '100%',
            ajax: {
                url: '/api/employees/approvers/managing-director',
                dataType: 'json',
                delay: 300,
                data: function (params) {
                    console.log('üîç Searching Managing Director:', params.term);
                    return {
                        q: params.term || ''
                    };
                },
                processResults: function (data) {
                    console.log('üìã Managing Directors found:', data.length);
                    return {
                        results: data.map(function(item) {
                            return {
                                id: item.id,
                                text: item.name + ' (' + item.level + ')'
                            };
                        })
                    };
                },
                cache: false
            },
            minimumInputLength: 0
        });

        $('#managingDirectorSelect').on('change', function() {
            const selectedValue = $(this).val();
            $('#managingDirectorIdHidden').val(selectedValue || '');
            console.log('‚úÖ Managing Director selected:', selectedValue);
        });

        console.log('‚úÖ Approvers Select2 initialized');
    });


    // ‚úÖ Format ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Dropdown
    function formatEmailOption(option) {
        if (!option.id) {
            return option.text;
        }

        var $option = $(
            '<div>' +
                '<strong>' + option.text + '</strong>' +
                '<br><small class="text-muted">' +
                    (option.name || '') +
                    (option.department ? ' (' + option.department + ')' : '') +
                '</small>' +
            '</div>'
        );

        return $option;
    }

    // ‚úÖ Format ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß (‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•)
    function formatEmailSelection(option) {
        return option.text || option.id;
    }


    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Department
    async function loadDepartments() {
        try {
            const response = await fetch('/api/employees/departments');
            if (!response.ok) {
                throw new Error('Failed to load departments');
            }

            const departments = await response.json();
            const departmentSelect = document.getElementById('departmentSelect');

            // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå options ‡πÄ‡∏î‡∏¥‡∏° (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ option ‡πÅ‡∏£‡∏Å)
            departmentSelect.innerHTML = '<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ù‡πà‡∏≤‡∏¢ --</option>';

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° options ‡∏à‡∏≤‡∏Å API
            departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept;
                option.textContent = dept;
                departmentSelect.appendChild(option);
            });

            console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î Departments ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', departments.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');

        } catch (error) {
            console.error('‚ùå Error loading departments:', error);
            alert('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
        }
    }

    // ‚úÖ Event: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Department ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î Position ‡πÅ‡∏•‡∏∞ reset ‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    document.getElementById('departmentSelect').addEventListener('change', async function() {
        const department = this.value;
        const positionSelect = document.getElementById('positionSelect');

        // ‚úÖ Reset Section Manager ‡πÅ‡∏•‡∏∞ Department Manager
        $('#sectionManagerSelect').val(null).trigger('change');
        $('#departmentManagerSelect').val(null).trigger('change');
        $('#sectionManagerIdHidden').val('');
        $('#departmentManagerIdHidden').val('');
        console.log('üîÑ Reset Section Manager ‡πÅ‡∏•‡∏∞ Department Manager');

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ù‡πà‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ disable Position dropdown
        if (!department) {
            positionSelect.disabled = true;
            positionSelect.innerHTML = '<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ù‡πà‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô --</option>';
            return;
        }

        try {
            // ‡πÅ‡∏™‡∏î‡∏á Loading
            positionSelect.innerHTML = '<option value="">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</option>';
            positionSelect.disabled = true;

            // ‡πÇ‡∏´‡∏•‡∏î Positions ‡∏ï‡∏≤‡∏° Department ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            const response = await fetch(`/api/employees/positions?department=${encodeURIComponent(department)}`);

            if (!response.ok) {
                throw new Error('Failed to load positions');
            }

            const positions = await response.json();

            // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° options ‡πÉ‡∏´‡∏°‡πà
            positionSelect.innerHTML = '<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á --</option>';

            if (positions.length === 0) {
                positionSelect.innerHTML = '<option value="">-- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏ù‡πà‡∏≤‡∏¢‡∏ô‡∏µ‡πâ --</option>';
                positionSelect.disabled = true;
                console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏ù‡πà‡∏≤‡∏¢:', department);
                return;
            }

            positions.forEach(pos => {
                const option = document.createElement('option');
                option.value = pos;
                option.textContent = pos;
                positionSelect.appendChild(option);
            });

            // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô dropdown
            positionSelect.disabled = false;

            console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î Positions ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', positions.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');

        } catch (error) {
            console.error('‚ùå Error loading positions:', error);
            positionSelect.innerHTML = '<option value="">-- ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î --</option>';
            positionSelect.disabled = true;
            alert('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
        }
    });

    // ‚úÖ Event: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Position ‡πÉ‡∏´‡πâ reset ‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    document.getElementById('positionSelect').addEventListener('change', function() {
        // ‚úÖ Reset Section Manager ‡πÅ‡∏•‡∏∞ Department Manager
        $('#sectionManagerSelect').val(null).trigger('change');
        $('#departmentManagerSelect').val(null).trigger('change');
        $('#sectionManagerIdHidden').val('');
        $('#departmentManagerIdHidden').val('');
        console.log('üîÑ Reset Section Manager ‡πÅ‡∏•‡∏∞ Department Manager (Position changed)');
    });
// ====================================================================
// Step 2: Form Submit Handler (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥)
// ====================================================================
(function() {
    'use strict';
    
    console.log('üîß Setting up form submit handler...');
    
    const form = document.querySelector('form[method="post"]');
    
    if (!form) {
        console.error('‚ùå Form not found!');
        return;
    }
    
    // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ submit ‡∏ã‡πâ‡∏≥
    let isSubmitting = false;
    
    console.log('‚úÖ Form found');
    
    // ‚úÖ ‡πÉ‡∏ä‡πâ addEventListener ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
    form.addEventListener('submit', async function(e) {
        // ‚≠ê ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô default behavior ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
        
        // ‚≠ê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á submit ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (isSubmitting) {
            console.warn('‚ö†Ô∏è Already submitting, ignoring duplicate submit');
            return false;
        }
        
        isSubmitting = true;
        console.log('üîµ Form submit triggered!');
        
        try {
            // ====================================================================
            // Validation
            // ====================================================================
            
            const company = document.querySelector('input[name="Company"]:checked');
            if (!company) {
                alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó');
                isSubmitting = false;
                return false;
            }
            
            const trainingType = document.querySelector('input[name="TrainingType"]:checked');
            if (!trainingType) {
                alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°');
                isSubmitting = false;
                return false;
            }
            
            const startDate = document.querySelector('input[name="StartDate"]');
            const endDate = document.querySelector('input[name="EndDate"]');
            
            if (!startDate || !startDate.value) {
                alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏ö‡∏£‡∏°');
                isSubmitting = false;
                return false;
            }
            
            if (!endDate || !endDate.value) {
                alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°');
                isSubmitting = false;
                return false;
            }
               // ====================================================================
    // Validation ‡∏ï‡∏≤‡∏° TrainingType
    // ====================================================================

    const trainingTypeValue = trainingType.value;

    if (trainingTypeValue === 'Public') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Public
        const costPerPerson = document.getElementById('CostPerPerson');
        const trainingHours = document.getElementById('TrainingHours');

        if (!costPerPerson || !costPerPerson.value || parseFloat(costPerPerson.value) <= 0) {
            alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Public Training');
            isSubmitting = false;
            costPerPerson?.focus();
            return false;
        }

        if (!trainingHours || !trainingHours.value || parseFloat(trainingHours.value) <= 0) {
            alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Public Training');
            isSubmitting = false;
            trainingHours?.focus();
            return false;
        }

        console.log('‚úÖ Public Training validation passed');

    } else if (trainingTypeValue === 'In House') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö In House
        // ‚ö†Ô∏è ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° field ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á

        // const costPerHour = document.getElementById('CostPerHour');
        // const numberOfDays = document.getElementById('NumberOfDays');

        // if (!costPerHour || !costPerHour.value || parseFloat(costPerHour.value) <= 0) {
        //     alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö In House Training');
        //     isSubmitting = false;
        //     costPerHour?.focus();
        //     return false;
        // }

        // if (!numberOfDays || !numberOfDays.value || parseFloat(numberOfDays.value) <= 0) {
        //     alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö In House Training');
        //     isSubmitting = false;
        //     numberOfDays?.focus();
        //     return false;
        // }

        console.log('‚úÖ In House Training No required fields validation');
    }
            
            // ====================================================================
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
            // ====================================================================
            
            console.log('üë• Getting employees data...');
            const employeesData = employeeManager.getEmployeesData();
            console.log('üë• Employees count:', employeesData.length);
            
            if (employeesData.length === 0) {
                const confirmSubmit = confirm('‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?');
                if (!confirmSubmit) {
                    console.log('‚ùå User cancelled');
                    isSubmitting = false;
                    return false;
                }
            }
            
            // ====================================================================
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á FormData
            // ====================================================================
            
            const formData = new FormData(form);
            formData.append('EmployeesJson', JSON.stringify(employeesData));
            
            console.log('üì¶ FormData prepared');
            console.log('üìÑ EmployeesJson:', employeesData);
            
            // ====================================================================
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Backend
            // ====================================================================
            
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalHTML = submitBtn.innerHTML;
            
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...';
            
            console.log('üöÄ Sending to /TrainingRequest/SaveTrainingRequest');
            
            const response = await fetch('/TrainingRequest/SaveTrainingRequest', {
                method: 'POST',
                body: formData
            });
            
            console.log('üì• Response status:', response.status);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå Response error:', errorText);
                throw new Error(`Server error: ${response.status}`);
            }
            
            const result = await response.json();
            console.log('üì• Response:', result);
            
            if (result.success) {
                console.log('‚úÖ Save successful!');
                alert(`‚úÖ ${result.message}\n\nüìÑ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${result.docNo}`);
                
                // Redirect
                setTimeout(() => {
                    window.location.href = '/TrainingRequest/Index';
                }, 500);
                
            } else {
                alert('‚ùå ' + result.message);
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalHTML;
                isSubmitting = false;
            }
            
        } catch (error) {
            console.error('‚ùå Error:', error);
            alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n\n' + error.message);
            
            const submitBtn = form.querySelector('button[type="submit"]');
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.innerHTML = 'üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å';
            }
            isSubmitting = false;
        }
        
        return false;
        
    }, { once: false, capture: true }); // ‚≠ê ‡πÉ‡∏ä‡πâ capture phase
    
    console.log('‚úÖ Form submit handler installed!');
})();
</script>